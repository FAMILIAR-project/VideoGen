package videogen

import java.util.HashMap
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.junit.Test
import org.xtext.example.mydsl.VideoGenStandaloneSetupGenerated
import org.xtext.example.mydsl.videoGen.AlternativeVideoSeq
import org.xtext.example.mydsl.videoGen.MandatoryVideoSeq
import org.xtext.example.mydsl.videoGen.OptionalVideoSeq
import org.xtext.example.mydsl.videoGen.VideoGeneratorModel

import static org.junit.Assert.*
import java.io.File
import java.io.FileWriter
import java.util.Random
import org.xtext.example.playlist.PlaylistStandaloneSetupGenerated
import org.xtext.example.playlist.playlist.Playlist

class VideoDemonstrator {
	
	def loadVideoGenerator(URI uri) {
		new VideoGenStandaloneSetupGenerated().createInjectorAndDoEMFRegistration()
		var res = new ResourceSetImpl().getResource(uri, true);
		res.contents.get(0) as VideoGeneratorModel
	}
	
	def loadPlaylist(URI uri) {
		new PlaylistStandaloneSetupGenerated().createInjectorAndDoEMFRegistration()
		var res = new ResourceSetImpl().getResource(uri, true);
		res.contents.get(0) as Playlist
	}
	
	def saveVideoGenerator(URI uri, VideoGeneratorModel pollS) {
		var Resource rs = new ResourceSetImpl().createResource(uri); 
		rs.getContents.add(pollS); 
		rs.save(new HashMap());
	}
	
	@Test
	def test1() {
		var videoGen = loadVideoGenerator(URI.createURI("foo2.videogen")) 
		assertNotNull(videoGen)
		assertEquals(7, videoGen.videoseqs.size)
		videoGen.videoseqs.forEach[videoseq | 
			if (videoseq instanceof MandatoryVideoSeq) {
				val desc = (videoseq as MandatoryVideoSeq).description
				if(desc.videoid.isNullOrEmpty)  desc.videoid = genID()  				
			}
			else if (videoseq instanceof OptionalVideoSeq) {
				val desc = (videoseq as OptionalVideoSeq).description
				if(desc.videoid.isNullOrEmpty) desc.videoid = genID() 
			}
			else {
				val altvid = (videoseq as AlternativeVideoSeq)
				if(altvid.videoid.isNullOrEmpty) altvid.videoid = genID()
				for (vdesc : altvid.videodescs) {
					if(vdesc.videoid.isNullOrEmpty) vdesc.videoid = genID()
				}
			}
		]
		// serializing
		saveVideoGenerator(URI.createURI("foo2bis.xmi"), videoGen)
		saveVideoGenerator(URI.createURI("foo2bis.videogen"), videoGen)
			
		printToHTML(videoGen)
		printToFile(videoGen)	
	}
	
	@Test
	def test3() {

		var videoGen = loadVideoGenerator(URI.createURI("drole.videogen")) 
		assertNotNull(videoGen)
		assertEquals(4, videoGen.videoseqs.size)			

		videoGen.videoseqs.forEach[videoseq | 
			if (videoseq instanceof MandatoryVideoSeq) {
				val desc = (videoseq as MandatoryVideoSeq).description
				if(desc.videoid.isNullOrEmpty)  desc.videoid = genID()  				
			}
			else if (videoseq instanceof OptionalVideoSeq) {
				val desc = (videoseq as OptionalVideoSeq).description
				if(desc.videoid.isNullOrEmpty) desc.videoid = genID() 
			}
			else {
				val altvid = (videoseq as AlternativeVideoSeq)
				if(altvid.videoid.isNullOrEmpty) altvid.videoid = genID()
				for (vdesc : altvid.videodescs) {
					if(vdesc.videoid.isNullOrEmpty) vdesc.videoid = genID()
				}
			}
		]
		// serializing
		saveVideoGenerator(URI.createURI("drole.xmi"), videoGen)
		saveVideoGenerator(URI.createURI("drole.videogen"), videoGen)
			
		//printToHTML(videoGen)
		//printToFileQ9(videoGen)	
		//printToWebVignette(videoGen)
		//printToGIF(videoGen)
		addText(videoGen)
		//printToFilter(videoGen)
		
	}
	
	@Test
	def test2() {

		var playlist = loadPlaylist(URI.createURI("test.playlist")) 
		assertNotNull(playlist)
		assertEquals(2, playlist.videos.size)			
		
		printToM3U(playlist)
		printToFileQ4(playlist)	
	}
	
	
	def void printToHTML(VideoGeneratorModel videoGen) {

		println("<ul>")
		videoGen.videoseqs.forEach[videoseq | 
			if (videoseq instanceof MandatoryVideoSeq) {
				val desc = (videoseq as MandatoryVideoSeq).description
				if(!desc.videoid.isNullOrEmpty)  
					println ("<li>" + desc.videoid + "</li>")  				
			}
			else if (videoseq instanceof OptionalVideoSeq) {
				val desc = (videoseq as OptionalVideoSeq).description
				if(!desc.videoid.isNullOrEmpty) 
					println ("<li>" + desc.videoid + "</li>") 
			}
			else {
				val altvid = (videoseq as AlternativeVideoSeq)
				if(!altvid.videoid.isNullOrEmpty) 
					println ("<li>" + altvid.videoid + "</li>")
				if (altvid.videodescs.size > 0) 
					println ("<ul>")
				for (vdesc : altvid.videodescs) {
					if(!vdesc.videoid.isNullOrEmpty) 
						println ("<li>" + vdesc.videoid + "</li>")
				}
				if (altvid.videodescs.size > 0) 
					println ("</ul>")
			}
		]
		println("</ul>")		
	}
	
	def void printToFile(VideoGeneratorModel videoGen) {
		
		var file = new File("Q1.txt")
     	var fileWriter = new FileWriter(file)
     	
		
		for(videoseq : videoGen.videoseqs){
	
			if (videoseq instanceof MandatoryVideoSeq){
				val desc = (videoseq as MandatoryVideoSeq).description
				if(!desc.videoid.isNullOrEmpty){ 
					fileWriter.write("file '"+desc.location+"' \n")
					fileWriter.flush()
				}
									
			}else if (videoseq instanceof OptionalVideoSeq) {
				val desc = (videoseq as OptionalVideoSeq).description
				var rdm = new Random().nextInt(2)

				if(rdm == 1){
					if(!desc.videoid.isNullOrEmpty) {
						fileWriter.write("file '"+desc.location+"' \n")
						fileWriter.flush();

				     
				   }
					
				}
				}else {
				
					val altvid = (videoseq as AlternativeVideoSeq)
					var random = new Random().nextInt(altvid.videodescs.size)
					var vdesc = altvid.videodescs.get(random);
					
				
			      	if(!vdesc.videoid.isNullOrEmpty) {
						fileWriter.write("file '"+vdesc.location+"' \n")
						fileWriter.flush();
					}
				
				}
			
			}
		fileWriter.close()	
	}
	
	def void printToFileQ9(VideoGeneratorModel videoGen) {
		

     	var vi = new Command
     	
		
		for(videoseq : videoGen.videoseqs){
	
			if (videoseq instanceof MandatoryVideoSeq){
				val desc = (videoseq as MandatoryVideoSeq).description
				if(!desc.videoid.isNullOrEmpty){ 
					
					vi.vignette(desc.location,desc.videoid)
				
				}
									
			}else if (videoseq instanceof OptionalVideoSeq) {
				val desc = (videoseq as OptionalVideoSeq).description
				var rdm = new Random().nextInt(2)

				if(rdm == 1){
					if(!desc.videoid.isNullOrEmpty) {
						
       					vi.vignette(desc.location,desc.videoid)
						
				     
				   }
					
				}
				}else {
				
					val altvid = (videoseq as AlternativeVideoSeq)
					var random = new Random().nextInt(altvid.videodescs.size)

					var vdesc = altvid.videodescs.get(random);
					
				
			      	if(!vdesc.videoid.isNullOrEmpty) {
			      		
			      		vi.vignette(vdesc.location,vdesc.videoid)
						
					}
				
				}
			
			}
	}
	
	def void printToGIF(VideoGeneratorModel videoGen) {
		
     	var vi = new Command
     	
		
		for(videoseq : videoGen.videoseqs){
	
			if (videoseq instanceof MandatoryVideoSeq){
				val desc = (videoseq as MandatoryVideoSeq).description
				if(!desc.videoid.isNullOrEmpty){ 
					println(desc.location+" "+desc.videoid)
					vi.gif(desc.location,desc.videoid)
					
				
				}
									
			}else if (videoseq instanceof OptionalVideoSeq) {
				val desc = (videoseq as OptionalVideoSeq).description
				var rdm = new Random().nextInt(2)

				if(rdm == 1){
					if(!desc.videoid.isNullOrEmpty) {
						
       					vi.gif(desc.location,desc.videoid)
						
				     
				   }
					
				}
				}else {
				
					val altvid = (videoseq as AlternativeVideoSeq)
					var random = new Random().nextInt(altvid.videodescs.size)

					var vdesc = altvid.videodescs.get(random);
					
				
			      	if(!vdesc.videoid.isNullOrEmpty) {
			      		
			      		vi.gif(vdesc.location,vdesc.videoid)
						
					}
				
				}
			
			}
	}
	
	def void printToFilter(VideoGeneratorModel videoGen) {
		
     	var vi = new Command
     	
		
		for(videoseq : videoGen.videoseqs){
	
			if (videoseq instanceof MandatoryVideoSeq){
				val desc = (videoseq as MandatoryVideoSeq).description
				if(!desc.videoid.isNullOrEmpty){ 
					println(desc.location+" "+desc.videoid)
					vi.filter(desc.location,desc.videoid)
					
				
				}
									
			}else if (videoseq instanceof OptionalVideoSeq) {
				val desc = (videoseq as OptionalVideoSeq).description
				var rdm = new Random().nextInt(2)

				if(rdm == 1){
					if(!desc.videoid.isNullOrEmpty) {
						
       					vi.filter(desc.location,desc.videoid)
						
				     
				   }
					
				}
				}else {
				
					val altvid = (videoseq as AlternativeVideoSeq)
					var random = new Random().nextInt(altvid.videodescs.size)

					var vdesc = altvid.videodescs.get(random);
					
				
			      	if(!vdesc.videoid.isNullOrEmpty) {
			      		
			      		vi.filter(vdesc.location,vdesc.videoid)
						
					}
				
				}
			
			}
	}
	
	def void printToM3U(Playlist playlist) {
		
		var file = new File("Q3.m3u")
     	var fileWriter = new FileWriter(file)
     		
		for(v : playlist.videos){
			fileWriter.write(v.name+"\n");
		}		
		
		fileWriter.close()		
	}
	
	def void printToFileQ4(Playlist playlist) {
		
		var file = new File("Q4.txt")
     	var fileWriter = new FileWriter(file)
     	
		
		for(v : playlist.videos){
			fileWriter.write("file '"+  v.name+"' \n");
		}		
		
		fileWriter.close()			
		
	}
	
	
	
	def void printToWebVignette(VideoGeneratorModel videoGen) {

		var file = new File("Q10.html")
     	var fileWriter = new FileWriter(file)
     	var vignette = new Command
     	
		for(videoseq : videoGen.videoseqs){ 
			if (videoseq instanceof MandatoryVideoSeq) {
				val desc = (videoseq as MandatoryVideoSeq).description
				if(!desc.videoid.isNullOrEmpty){	
							
					vignette.vignette(desc.location,desc.videoid)
					fileWriter.write("<img src=\"" + desc.videoid + ".png\"> \n");
					fileWriter.write("<br/>")
					fileWriter.flush()
				}  
						
			}
			else if (videoseq instanceof OptionalVideoSeq) {
				val desc = (videoseq as OptionalVideoSeq).description
				var rdm = new Random().nextInt(2)

				if(rdm == 1){
					if(!desc.videoid.isNullOrEmpty){
						println(rdm)
					
						vignette.vignette(desc.location,desc.videoid)
						fileWriter.write("<img src=\"" + desc.videoid + ".png\"> \n")
						fileWriter.write("<br/>")
						fileWriter.flush()
						
					}	
				}
				
			}else {
				val altvid = (videoseq as AlternativeVideoSeq)
				var random = new Random().nextInt(altvid.videodescs.size)
				var vdesc = altvid.videodescs.get(random);
				
				if(!altvid.videoid.isNullOrEmpty){
					println(random)
					vignette.vignette(vdesc.location,vdesc.videoid)
					fileWriter.write("<img src=\"" + vdesc.videoid + ".png\"> \n");
					fileWriter.flush()
						
				}
				
			}
		}
	}
	
	def void verifyQ11(VideoGeneratorModel videoGen) {
		
		var file = new File("Q11.txt")
     	var fileWriter = new FileWriter(file)
     	val String[] mondatory = newArrayOfSize(10)
     	val String[] optional = newArrayOfSize(10)
     	val String[] alternative = newArrayOfSize(10)
		
		for(videoseq : videoGen.videoseqs){
	
			if(videoseq instanceof MandatoryVideoSeq){
				
				val desc = (videoseq as MandatoryVideoSeq).description
				var location = desc.videoid
				mondatory.add(location)
				
			}else if(videoseq instanceof OptionalVideoSeq){
					
				val desc = (videoseq as OptionalVideoSeq).description
				var location = desc.videoid
				optional.add(location)
					
			}else{
				
				val altvid = (videoseq as AlternativeVideoSeq)
				var location = altvid.videoid
				alternative.add(location)			
			}	
		}
		for(m : mondatory){
			for(m2 : mondatory){
				
			}
		}
	}
	
	
	def void addText(VideoGeneratorModel videoGen) {
		
     	var vi = new Command
     	


		for(videoseq : videoGen.videoseqs){
	
			if (videoseq instanceof MandatoryVideoSeq){
				val desc = (videoseq as MandatoryVideoSeq).description
				if(!desc.videoid.isNullOrEmpty){ 
				
					
					
					vi.text(desc.location, desc.videoid, desc.text)
					
				
				}
									
			}else if (videoseq instanceof OptionalVideoSeq) {
				val desc = (videoseq as OptionalVideoSeq).description
				var rdm = new Random().nextInt(2)
				if(rdm == 1){
					if(!desc.videoid.isNullOrEmpty) {
						
       					vi.gif(desc.location,desc.videoid)
						
				     
				   }
					
				}
				}else {
				
					val altvid = (videoseq as AlternativeVideoSeq)
					var random = new Random().nextInt(altvid.videodescs.size)
					var vdesc = altvid.videodescs.get(random);
					
				
			      	if(!vdesc.videoid.isNullOrEmpty) {
			      		
			      		vi.gif(vdesc.location,vdesc.videoid)
						
					}
				
				}
			
			}
	}
	
	static var i = 0;
	def genID() {
		"v" + i++
	}
	
}