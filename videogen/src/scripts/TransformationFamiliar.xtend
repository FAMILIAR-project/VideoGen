package scripts

import java.io.File
import java.io.PrintWriter
import java.util.ArrayList
import java.util.HashMap
import java.util.StringJoiner
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.xtext.example.mydsl.VideoGenStandaloneSetupGenerated
import org.xtext.example.mydsl.videoGen.AlternativeVideoSeq
import org.xtext.example.mydsl.videoGen.MandatoryVideoSeq
import org.xtext.example.mydsl.videoGen.OptionalVideoSeq
import org.xtext.example.mydsl.videoGen.VideoGeneratorModel

class TransformationFamiliar {
	
	def static loadVideoGenerator(URI uri) {
		new VideoGenStandaloneSetupGenerated().createInjectorAndDoEMFRegistration()
		var res = new ResourceSetImpl().getResource(uri, true);
		res.contents.get(0) as VideoGeneratorModel
	}

	def static saveVideoGenerator(URI uri, VideoGeneratorModel pollS) {
		var Resource rs = new ResourceSetImpl().createResource(uri);
		rs.getContents.add(pollS);
		rs.save(new HashMap());
	}
	
	/**
	 * A partir d'un fichier .videogen, récupère le modèle
	 * et effectue la transformation vers un feature model FAMILIAR
	 */
	def static void main(String[] args) {
		val path = "mastaconcat.videogen"
		
		val videogen = loadVideoGenerator(URI.createURI(path))
		
		val sb = new StringBuilder
		val alternatives = new ArrayList
		
		sb.append("fmVideoGen = FM (VideoGen: ")
		
		videogen.videoseqs.forEach[videoseq |
			if(videoseq instanceof MandatoryVideoSeq){
				if (videoseq.description.videoid.isNullOrEmpty) videoseq.description.videoid = genID()
				val id = videoseq.description.videoid
				sb.append(id+" ")
			}else if(videoseq instanceof OptionalVideoSeq){
				if (videoseq.description.videoid.isNullOrEmpty) videoseq.description.videoid = genID()
				val id = videoseq.description.videoid
				sb.append("["+id+"] ")
			}else if(videoseq instanceof AlternativeVideoSeq){
				if (videoseq.videoid.isNullOrEmpty) videoseq.videoid = genID()
				val id = videoseq.videoid
				sb.append(id+" ")
				alternatives.add(videoseq)
			}
		]
		sb.append(";")
		
		alternatives.forEach[alt |
			sb.append("\n")
			val id = alt.videoid
			sb.append(id+": ")
			val sj = new StringJoiner(" | ", "( ", " )");
			alt.videodescs.forEach[desc |
				if (desc.videoid.isNullOrEmpty) desc.videoid = genID()
				sj.add(desc.videoid)
			]
			sb.append(sj.toString+";")
		]
		
		sb.append("\n)")
		
		val outputName = path.substring(0, path.lastIndexOf('.'))+".fml"
		val outputFile = new File(outputName)
		val pw = new PrintWriter(outputFile)
		pw.write(sb.toString)
		pw.flush
		pw.close
		
		println("File saved in : "+outputFile.absolutePath)
	}
	
	private static int i = 0;
	def private static genID() {
		"_autogenerated" + i++
	}
}