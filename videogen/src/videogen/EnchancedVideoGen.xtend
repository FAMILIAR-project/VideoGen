package videogen

import java.nio.file.Files
import java.nio.file.Paths
import java.util.Collections
import java.util.HashMap
import java.util.Random
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.xtext.example.mydsl.VideoGenStandaloneSetupGenerated
import org.xtext.example.mydsl.videoGen.AlternativeVideoSeq
import org.xtext.example.mydsl.videoGen.MandatoryVideoSeq
import org.xtext.example.mydsl.videoGen.OptionalVideoSeq
import org.xtext.example.mydsl.videoGen.VideoGeneratorModel
import playlist.PlaylistFactory
import java.io.BufferedReader
import java.io.InputStreamReader
import java.io.File
import java.io.PrintWriter
import org.xtext.example.mydsl.videoGen.VideoDescription

class EnchancedVideoGen {
	def static loadVideoGenerator(URI uri) {
		new VideoGenStandaloneSetupGenerated().createInjectorAndDoEMFRegistration()
		var res = new ResourceSetImpl().getResource(uri, true);
		res.contents.get(0) as VideoGeneratorModel
	}

	def static saveVideoGenerator(URI uri, VideoGeneratorModel pollS) {
		var Resource rs = new ResourceSetImpl().createResource(uri);
		rs.getContents.add(pollS);
		rs.save(new HashMap());
	}

	def static main(String[] args) {
		var videoGen = loadVideoGenerator(URI.createURI("mastaconcat.videogen"))
		val rand = new Random()
		val playlist = PlaylistFactory.eINSTANCE.createPlaylist
		val cmd = "vlc play.m3u"
		videoGen.videoseqs.forEach [ videoseq |
			if (videoseq instanceof MandatoryVideoSeq) {
				if (videoseq.description.videoid.isNullOrEmpty) videoseq.description.videoid = genID()
				val mediafile = PlaylistFactory.eINSTANCE.createVideo
				mediafile.url = videoseq.description.location
				if (videoseq.description.duration == 0) {
					mediafile.duration = extractDuration(videoseq.description.location).intValue
				} else {
					mediafile.duration = videoseq.description.duration
				}
				mediafile.thumbnail = extractThumbnail(videoseq.description.location, videoseq.description.videoid)
				playlist.videos.add(mediafile)
			}
			if (videoseq instanceof OptionalVideoSeq) {
				if (videoseq.description.videoid.isNullOrEmpty) videoseq.description.videoid = genID()
				if (rand.nextInt(2) == 1) {
					val mediafile = PlaylistFactory.eINSTANCE.createVideo
					mediafile.url = videoseq.description.location
					if (videoseq.description.duration == 0) {
						mediafile.duration = extractDuration(videoseq.description.location).intValue
					} else {
						mediafile.duration = videoseq.description.duration
					}
									mediafile.thumbnail = extractThumbnail(videoseq.description.location, videoseq.description.videoid)
					
					playlist.videos.add(mediafile)
				}
			}
			if (videoseq instanceof AlternativeVideoSeq) {
				
				if(videoseq.videoid.isNullOrEmpty) videoseq.videoid = genID
				
				val listAlt = (videoseq as AlternativeVideoSeq).videodescs
				
				listAlt.forEach[alt |
					if(alt.videoid.isNullOrEmpty) alt.videoid = genID
				]
				
				val quicesera = rand.nextInt(listAlt.size)
				val mediafile = PlaylistFactory.eINSTANCE.createVideo
				mediafile.url = listAlt.get(quicesera).location
				if (listAlt.get(quicesera).duration == 0) {
					mediafile.duration = extractDuration(listAlt.get(quicesera).location).intValue
				} else {
					mediafile.duration = listAlt.get(quicesera).duration
				}
				mediafile.thumbnail = extractThumbnail(listAlt.get(quicesera).location, listAlt.get(quicesera).videoid)
				playlist.videos.add(mediafile)
			}
		]
		Files.write(
			Paths.get("play.m3u"),
			Collections.singletonList(PlaylistToText.playlistToText(playlist, "m3uext"))
		)
//		Runtime.runtime.exec(cmd)

		printToHTML(videoGen, "videogen.html")

		return
	}

	def static extractDuration(String location) {
		val cmd = "ffprobe -v error -select_streams v:0 -show_entries stream=duration -of " +
			"default=noprint_wrappers=1:nokey=1 %s"

		val checkCmd = String.format(cmd, location)
		val process = Runtime.runtime.exec(String.format(checkCmd, location))
		process.waitFor
		val in = new BufferedReader(new InputStreamReader(process.getInputStream()))
		val value = in.readLine
		return Double::parseDouble(value)
	}

	def static extractThumbnail(String location, String name) {
		var cmd = "ffmpeg -i %s -ss 00:00:01.000 -vframes 1 " + "thumbnails/%s.jpg -y"
		cmd = String.format(cmd, location, name)
		if(!Files.exists(Paths.get("thumbnails")))
		{
			Files.createDirectory(Paths.get("thumbnails"))
		}
		val process = Runtime.runtime.exec(String.format(cmd, location))
		process.waitFor
		return String.format("thumbnails/%s.jpg", name)
	}
	
	static int i = 0;
	def static genID() {
		"_autogenerated" + i++
	}
	
	def static void printToHTML(VideoGeneratorModel videoGen, String outputPath) {
		val output = new File(outputPath)
		val pw = new PrintWriter(output)
		
		val cssPath = new File(output.parent, "videogen.css").path
		saveCssFile(cssPath)
		
		pw.println("<!DOCTYPE html>")
		pw.println("<html>")
		pw.println("<head>")
		pw.println("<link rel=\"stylesheet\" type=\"text/css\" href=\""+cssPath+"\">")
		pw.println("</head>")
		pw.println("<body>")
		pw.println("<ul>")
		videoGen.videoseqs.forEach[videoseq | 
			if (videoseq instanceof MandatoryVideoSeq) {
				val desc = (videoseq as MandatoryVideoSeq).description
				if(!desc.videoid.isNullOrEmpty)  
					pw.println (vidToHtml(desc))  				
			}
			else if (videoseq instanceof OptionalVideoSeq) {
				val desc = (videoseq as OptionalVideoSeq).description
				if(!desc.videoid.isNullOrEmpty) 
					pw.println (vidToHtml(desc)) 
			}
			else {
				val altvid = (videoseq as AlternativeVideoSeq)
//				if(!altvid.videoid.isNullOrEmpty) 
//					pw.println ("<li>" + altvid.videoid + "</li>")
				if (altvid.videodescs.size > 0) // there are vid seq alternatives
					pw.println ("<ul id=\"alternatives\">")
				for (vdesc : altvid.videodescs) {
					if(!vdesc.videoid.isNullOrEmpty) 
						pw.println (vidToHtml(vdesc))
				}
				if (altvid.videodescs.size > 0) // there are vid seq alternatives
					pw.println ("</ul>")
			}
		]
		pw.println("</ul>")
		pw.println("</body>")
		pw.println("</html>")
		pw.flush
		pw.close
	}
	
	def static saveCssFile(String outputPath) {
		val output = new File(outputPath)
		val pw = new PrintWriter(output)
		
		pw.println(
		"ul#alternatives li { 
display : inline;
}
ul{
list-style-type : none;
padding : 0;
}
il{
padding : 0;
}")
		
		pw.flush
		pw.close
	}
	
	def static String vidToHtml(VideoDescription vdesc){
		val result = new StringBuilder
		val thumbnail = extractThumbnail(vdesc.location, vdesc.videoid)
		val id = vdesc.videoid
		
		result.append("<li>")
		result.append("<img src=\""+thumbnail+"\" alt=\""+id+"\" width=\"100\" height=\"100\">")
		result.append("</li>")

		result.toString
	}

}
