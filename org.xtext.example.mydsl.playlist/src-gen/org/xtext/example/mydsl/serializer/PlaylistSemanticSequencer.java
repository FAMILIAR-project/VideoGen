/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.playlist.Mediafile;
import org.xtext.example.mydsl.playlist.PlaylistGeneratorModel;
import org.xtext.example.mydsl.playlist.PlaylistPackage;
import org.xtext.example.mydsl.services.PlaylistGrammarAccess;

@SuppressWarnings("all")
public class PlaylistSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PlaylistGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PlaylistPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PlaylistPackage.MEDIAFILE:
				sequence_Mediafile(context, (Mediafile) semanticObject); 
				return; 
			case PlaylistPackage.PLAYLIST_GENERATOR_MODEL:
				sequence_PlaylistGeneratorModel(context, (PlaylistGeneratorModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Mediafile returns Mediafile
	 *
	 * Constraint:
	 *     (id=STRING location=STRING duration=FLOAT)
	 */
	protected void sequence_Mediafile(ISerializationContext context, Mediafile semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlaylistPackage.Literals.MEDIAFILE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlaylistPackage.Literals.MEDIAFILE__ID));
			if (transientValues.isValueTransient(semanticObject, PlaylistPackage.Literals.MEDIAFILE__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlaylistPackage.Literals.MEDIAFILE__LOCATION));
			if (transientValues.isValueTransient(semanticObject, PlaylistPackage.Literals.MEDIAFILE__DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlaylistPackage.Literals.MEDIAFILE__DURATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMediafileAccess().getIdSTRINGTerminalRuleCall_3_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getMediafileAccess().getLocationSTRINGTerminalRuleCall_5_0(), semanticObject.getLocation());
		feeder.accept(grammarAccess.getMediafileAccess().getDurationFLOATTerminalRuleCall_7_0(), semanticObject.getDuration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PlaylistGeneratorModel returns PlaylistGeneratorModel
	 *
	 * Constraint:
	 *     mediafiles+=Mediafile+
	 */
	protected void sequence_PlaylistGeneratorModel(ISerializationContext context, PlaylistGeneratorModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
