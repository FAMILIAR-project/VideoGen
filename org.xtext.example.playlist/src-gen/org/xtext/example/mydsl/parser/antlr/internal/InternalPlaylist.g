/*
 * generated by Xtext 2.10.0
 */
grammar InternalPlaylist;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.PlaylistGrammarAccess;

}

@parser::members {

 	private PlaylistGrammarAccess grammarAccess;

    public InternalPlaylistParser(TokenStream input, PlaylistGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Playlist";
   	}

   	@Override
   	protected PlaylistGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePlaylist
entryRulePlaylist returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlaylistRule()); }
	iv_rulePlaylist=rulePlaylist
	{ $current=$iv_rulePlaylist.current; }
	EOF;

// Rule Playlist
rulePlaylist returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPlaylistAccess().getVidsMediaFileParserRuleCall_0());
			}
			lv_vids_0_0=ruleMediaFile
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPlaylistRule());
				}
				add(
					$current,
					"vids",
					lv_vids_0_0,
					"org.xtext.example.mydsl.Playlist.MediaFile");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleMediaFile
entryRuleMediaFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMediaFileRule()); }
	iv_ruleMediaFile=ruleMediaFile
	{ $current=$iv_ruleMediaFile.current; }
	EOF;

// Rule MediaFile
ruleMediaFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_location_0_0=RULE_STRING
			{
				newLeafNode(lv_location_0_0, grammarAccess.getMediaFileAccess().getLocationSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getMediaFileRule());
				}
				setWithLastConsumed(
					$current,
					"location",
					lv_location_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
