/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PlaylistGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PlaylistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Playlist.Playlist");
		private final Assignment cVidsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVidsMediaFileParserRuleCall_0 = (RuleCall)cVidsAssignment.eContents().get(0);
		
		//Playlist:
		//	vids+=MediaFile*;
		@Override public ParserRule getRule() { return rule; }
		
		//vids+=MediaFile*
		public Assignment getVidsAssignment() { return cVidsAssignment; }
		
		//MediaFile
		public RuleCall getVidsMediaFileParserRuleCall_0() { return cVidsMediaFileParserRuleCall_0; }
	}
	public class MediaFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Playlist.MediaFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocationSTRINGTerminalRuleCall_0_0 = (RuleCall)cLocationAssignment_0.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationINTTerminalRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		
		//MediaFile:
		//	location=STRING duration=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//location=STRING duration=INT
		public Group getGroup() { return cGroup; }
		
		//location=STRING
		public Assignment getLocationAssignment_0() { return cLocationAssignment_0; }
		
		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_0_0() { return cLocationSTRINGTerminalRuleCall_0_0; }
		
		//duration=INT
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_1_0() { return cDurationINTTerminalRuleCall_1_0; }
	}
	
	
	private final PlaylistElements pPlaylist;
	private final MediaFileElements pMediaFile;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PlaylistGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPlaylist = new PlaylistElements();
		this.pMediaFile = new MediaFileElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Playlist".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Playlist:
	//	vids+=MediaFile*;
	public PlaylistElements getPlaylistAccess() {
		return pPlaylist;
	}
	
	public ParserRule getPlaylistRule() {
		return getPlaylistAccess().getRule();
	}
	
	//MediaFile:
	//	location=STRING duration=INT;
	public MediaFileElements getMediaFileAccess() {
		return pMediaFile;
	}
	
	public ParserRule getMediaFileRule() {
		return getMediaFileAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
