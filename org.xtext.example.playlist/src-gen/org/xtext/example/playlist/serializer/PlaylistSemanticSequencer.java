/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.playlist.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.playlist.playlist.Playlist;
import org.xtext.example.playlist.playlist.PlaylistPackage;
import org.xtext.example.playlist.playlist.Video;
import org.xtext.example.playlist.services.PlaylistGrammarAccess;

@SuppressWarnings("all")
public class PlaylistSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PlaylistGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PlaylistPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PlaylistPackage.PLAYLIST:
				sequence_Playlist(context, (Playlist) semanticObject); 
				return; 
			case PlaylistPackage.VIDEO:
				sequence_Video(context, (Video) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Playlist returns Playlist
	 *
	 * Constraint:
	 *     videos+=Video+
	 */
	protected void sequence_Playlist(ISerializationContext context, Playlist semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Video returns Video
	 *
	 * Constraint:
	 *     location=STRING
	 */
	protected void sequence_Video(ISerializationContext context, Video semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlaylistPackage.Literals.VIDEO__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlaylistPackage.Literals.VIDEO__LOCATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVideoAccess().getLocationSTRINGTerminalRuleCall_1_0(), semanticObject.getLocation());
		feeder.finish();
	}
	
	
}
