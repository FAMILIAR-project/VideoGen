/*
 * generated by Xtext 2.10.0
 */
grammar InternalPlaylist;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.PlaylistGrammarAccess;

}
@parser::members {
	private PlaylistGrammarAccess grammarAccess;

	public void setGrammarAccess(PlaylistGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRulePlaylist
entryRulePlaylist
:
{ before(grammarAccess.getPlaylistRule()); }
	 rulePlaylist
{ after(grammarAccess.getPlaylistRule()); } 
	 EOF 
;

// Rule Playlist
rulePlaylist 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlaylistAccess().getVidsAssignment()); }
		(rule__Playlist__VidsAssignment)*
		{ after(grammarAccess.getPlaylistAccess().getVidsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMediaFile
entryRuleMediaFile
:
{ before(grammarAccess.getMediaFileRule()); }
	 ruleMediaFile
{ after(grammarAccess.getMediaFileRule()); } 
	 EOF 
;

// Rule MediaFile
ruleMediaFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMediaFileAccess().getLocationAssignment()); }
		(rule__MediaFile__LocationAssignment)
		{ after(grammarAccess.getMediaFileAccess().getLocationAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Playlist__VidsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlaylistAccess().getVidsMediaFileParserRuleCall_0()); }
		ruleMediaFile
		{ after(grammarAccess.getPlaylistAccess().getVidsMediaFileParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MediaFile__LocationAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMediaFileAccess().getLocationSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getMediaFileAccess().getLocationSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
